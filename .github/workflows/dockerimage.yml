name: Docker Image CI
run-name: Build dfuse Image with tag '${{ github.event.inputs.dfuse }}'' and nodeos tag '${{ github.event.inputs.eosio }}'

on:
  # Only allows triggering through the Github Workflow UI
  workflow_dispatch:
    inputs:
      dfuse:
        description: Tag from dfuse-eosio
        required: true
        type: string
      eosio:
        description: Tag from eosio
        default: 'null'
        required: false
        type: string
      overwrite-dfuse:
        description: Overwrite Existed Dfuse Image.
        default: false
        type: boolean

env:
  DOCKER_IMAGE: eu.gcr.io/dfuse-302310/dfuse-eosio

jobs:
  build:
    name: Build and Push image
    runs-on: ubuntu-latest

    steps:
      - name: Set Dfuse Version
        run: |
          echo "DFUSE_TAG=${{ github.event.inputs.dfuse }}" >> $GITHUB_ENV

      - name: Set Nodeos Version
        if: ${{ github.event.inputs.eosio != 'null' }}
        run: |
          echo "EOSIO_TAG=${{ github.event.inputs.eosio }}" >> $GITHUB_ENV
          echo "DFUSE_NODEOS_TAG=${{ github.event.inputs.dfuse }}-nodeos${{ github.event.inputs.eosio }}" >> $GITHUB_ENV

      # # checkout based on dfuse tag
      # - name: Checkout dfuse-eosio
      #   uses: actions/checkout@v3
      #   with:
      #     ref: "${{ env.DFUSE_TAG }}"

      # # check release commit
      # - name: Update Commit Hash
      #   run: |
      #     echo "RELEASE_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # # Only download eosio if set
      # - name: Download EOSIO Debian package
      #   if: ${{ github.event.inputs.eosio != 'null' }}
      #   uses: Legion2/download-release-action@v2.1.0
      #   with:
      #     repository: ultraio/eosio
      #     tag: '${{ github.event.inputs.eosio }}'
      #     path: .
      #     file:  eosio-${{ env.EOSIO_TAG }}.deb
      #     token: '${{ secrets.DEVOPS_SECRET }}'

      # # gcloud authorization
      # - id: 'auth'
      #   uses: 'google-github-actions/auth@v1'
      #   with:
      #     credentials_json: '${{ secrets.GCR_KEY }}'

      # - name: Setup gcloud cli
      #   uses: google-github-actions/setup-gcloud@v1
      #   with:
      #     project_id: dfuse-302310

      # # docker gcloud config
      # - name: Docker config
      #   run: |
      #     gcloud auth configure-docker -q

      # Check if dfuse image is existed. 0 = existed, others = not existed
      - name: Check Dfuse Image
        run: |
          echo "DFUSE_IMAGE_EXISTED=$(docker image inspect ${{ env.DOCKER_IMAGE }}:${{ env.DFUSE_TAG }})" >> $GITHUB_ENV
          echo ${{ env.DFUSE_IMAGE_EXISTED }}
          echo ${{ env.DFUSE_IMAGE_EXISTED != '' || github.event.inputs.overwrite-dfuse == true }}

      # # Only build dfuse image if not existed or overwrite is set
      # - name: Build Dfuse Image Without Nodeos
      #   if: ${{ env.DFUSE_IMAGE_EXISTED != 0 || github.event.inputs.overwrite-dfuse == true }}
      #   run: |
      #     docker build -f dfuse.Dockerfile . -t ${{ env.DOCKER_IMAGE }}:${{ env.DFUSE_TAG }} \
      #           --build-arg VERSION=${{ env.DFUSE_TAG }} \
      #           --build-arg COMMIT=${{ env.RELEASE_COMMIT }}
      #     docker push ${{ env.DOCKER_IMAGE }}:${{ env.DFUSE_TAG }}
      
      # # Only build dfuse with nodeos if eosio is set
      # - name: Build Dfuse Image With Nodeos
      #   if: ${{ github.event.inputs.eosio != 'null' }}
      #   run: |
      #     docker build -f nodeos.Dockerfile . -t ${{ env.DOCKER_IMAGE }}:${{ env.DFUSE_NODEOS_TAG }} \
      #           --build-arg DFUSE_IMAGE=${{ env.DOCKER_IMAGE }}:${{ env.DFUSE_TAG }}
      #           --build-arg DEB_PKG=eosio-${{ env.EOSIO_TAG }}.deb
      #     docker push ${{ env.DOCKER_IMAGE }}:${{ env.DFUSE_NODEOS_TAG }}
